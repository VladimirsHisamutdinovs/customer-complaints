version: '3.9'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - telecom_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j:
    build:
      context: ./neo4j_graphdb
      dockerfile: Dockerfile
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: "neo4j/password"
      NEO4J_dbms_default__database: "complaints"
    networks:
      - telecom_network
    volumes:
      - neo4j_data:/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j_graphdb:
    build:
      context: ./neo4j_graphdb
      dockerfile: Dockerfile.client
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - telecom_network

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: complaints_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - telecom_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/tables.sql:/docker-entrypoint-initdb.d/tables.sql
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d complaints_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  customer_agent:
    build:
      context: ./customer
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - telecom_network

  customer_support_agent:
    build:
      context: ./customer_support
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - telecom_network

  test_initiation:
    build:
      context: ./test_initiation
      dockerfile: Dockerfile
    networks:
      - telecom_network
    command: ["python", "test_initiation.py"]
    depends_on:
      redis:
        condition: service_healthy
      customer_agent:
        condition: service_started
      customer_support_agent:
        condition: service_started

  timeseries_generator:
    build:
      context: ./timeseries_generator
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - telecom_network

  alerter:
    build:
      context: ./alerter
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      timeseries_generator:
        condition: service_started
    networks:
      - telecom_network

networks:
  telecom_network:
    driver: bridge

volumes:
  neo4j_data:
  postgres_data:
